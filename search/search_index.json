{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rx Preferences","text":"<p>A collection of libraries to allow <code>SharedPreferences</code> to be reactive</p> <p>This library was created to continue improving on the great work that @f2prateek had done with rx-preferences.</p> <p>In order to handle the varying number of reactive frameworks available, there are multiple libraries available, which all share the same basic APIs and adapters.</p>"},{"location":"#available-reactive-sharedpreferences-libraries","title":"Available Reactive SharedPreferences Libraries","text":"<p>Core <pre><code>implementation 'com.frybits.rx.preferences:core:2.0.0'\n</code></pre></p> <p>Coroutine/Flow <pre><code>implementation 'com.frybits.rx.preferences:coroutine:2.0.0'\n</code></pre></p> <p>LiveData <pre><code>implementation 'com.frybits.rx.preferences:livedata:2.0.0'\n</code></pre></p> <p>Rx2 <pre><code>implementation 'com.frybits.rx.preferences:rx2:2.0.0'\n</code></pre></p> <p>Rx3 <pre><code>implementation 'com.frybits.rx.preferences:rx3:2.0.0'\n</code></pre></p> <p>For ease of ensuring all libraries are compatible, as they may have varying release cadences, a BOM is also provided:</p> <pre><code>// Import BOM\nimplementation platform('com.frybits.rx.preferences:bom:2.0.0')\nimplementation 'com.frybits.rx.preferences:core'\nimplementation 'com.frybits.rx.preferences:livedata'\nimplementation 'com.frybits.rx.preferences:rx2'\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>    Copyright 2014 Prateek Srivastava\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#version-200-2024-09-30","title":"Version 2.0.0 / 2024-09-30","text":"<ul> <li>Breaking Change release</li> <li>Use extension functions for Rx libraries</li> <li>This removes the uses of the various <code>*SharedPreference</code> classes, and provides a single <code>RxSharedPreferences</code> class</li> <li>This also removes the various <code>*Preference</code> classes in favor of a single <code>Preference</code> class</li> <li>All reactive frameworks are now accessible as extension functions against the <code>Preference</code> class.<ul> <li>Java will have util classes to provide the access to extension functions</li> </ul> </li> <li>Update CI to build against latest android images</li> <li>Update several dependencies</li> <li>Remove deprecated APIs from rx-sharedpreferences</li> <li>Add in utility to convert <code>Preference&lt;T&gt;</code> to <code>Preference&lt;Optional&lt;T&gt;&gt;</code> for reactive frameworks that don't allow <code>null</code>.</li> </ul>"},{"location":"changelog/#version-110-2023-10-03","title":"Version 1.1.0 / 2023-10-03","text":"<ul> <li>Update dependencies</li> <li>Move to compile sdk 34</li> <li>Use vanniktech for maven publishing</li> <li>Update CI script so that publishing occurs via CI now</li> <li>Remove build health checks from CI (for now)</li> </ul>"},{"location":"changelog/#version-100-all-2023-03-27","title":"Version 1.0.0 - ALL / 2023-03-27","text":"<ul> <li>Fork of f2prateek/rx-preferences</li> <li>Due to group ID change and package change, this project will start the versioning at <code>1.0.0</code> for all libraries.</li> <li><code>rx2</code></li> <li>Initial release</li> <li>Contains fix for f2prateek/rx-preferences#141</li> <li><code>rx3</code></li> <li>Initial release</li> <li>Fix for f2prateek/rx-preferences#135</li> <li><code>coroutines</code>, <code>livedata</code>, <code>core</code>, <code>bom</code></li> <li>Initial release</li> </ul>"},{"location":"changelog/#migration-to-comfrybitsrxpreferences","title":"=== Migration to <code>com.frybits.rx.preferences</code> ===","text":""},{"location":"changelog/#version-201-18-09-2020","title":"Version 2.0.1 (18-09-2020)","text":"<p>Promotes <code>2.0.1-beta1</code> to a stable release.</p>"},{"location":"changelog/#version-201-beta1-15-04-2020","title":"Version 2.0.1-beta1 (15-04-2020)","text":"<ul> <li> <p>Fix: Improve handling for <code>null</code> values stored in preferences.</p> </li> <li> <p>Improvement: Update dependencies and tools.</p> </li> </ul>"},{"location":"changelog/#version-200-22-04-2018","title":"Version 2.0.0 (22-04-2018)","text":"<p>Promotes <code>2.0.0-RC3</code> to a stable release. If you are migrating from v1, please refer to the changelog for earlier RC versions to see what has changed.</p>"},{"location":"changelog/#version-200-rc3-13-08-2017","title":"Version 2.0.0-RC3 (13-08-2017)","text":"<ul> <li> <p>New: Add ability to clear preferences via <code>RxSharedPreferences</code>.</p> </li> <li> <p>Fix: The default value for <code>RxSharedPreferences#getObject</code> may not be null, but was incorrectly annotated as <code>@Nullable</code>. This corrects the annotation to <code>@NonNull</code>.</p> </li> </ul>"},{"location":"changelog/#version-200-rc2-27-04-2017","title":"Version 2.0.0-RC2 (27-04-2017)","text":"<p>This release includes multiple breaking changes.</p> <ul> <li>New: Replace <code>Adapter</code> with <code>Converter</code>. A <code>Converter</code> is a simpler interface that only deals with serialization, and abstracts away the complexity of working with <code>SharedPreferences</code> or <code>SharedPreferences.Editor</code>.</li> </ul> <pre><code>/**\n * Converts instances of {@code T} to be stored and retrieved as Strings in {@link\n * SharedPreferences}.\n */\ninterface Converter&lt;T&gt; {\n  /**\n   * Deserialize to an instance of {@code T}. The input is retrieved from {@link\n   * SharedPreferences#getString(String, String)}.\n   */\n  @NonNull T deserialize(@NonNull String serialized);\n\n  /**\n   * Serialize the {@code value} to a String. The result will be used with {@link\n   * SharedPreferences.Editor#putString(String, String)}.\n   */\n  @NonNull String serialize(@NonNull T value);\n}\n</code></pre> <ul> <li> <p>New: Disallow null values from being emitted by the Preference observable. Specifically <code>RxSharedPreferences#getEnum</code> and <code>RxSharedPreferences#getObject</code> do not allow null values to be used as a default value.</p> </li> <li> <p>New: Make <code>Preference#set</code> only accept non null values. Trying to call <code>set</code> with a null value will now throw an exception.</p> </li> <li> <p>New: Make the <code>Set&lt;String&gt;</code> returned by <code>RxSharedPreferences#getStringSet</code> unmodifiable.</p> </li> <li> <p>Improvement: Use <code>@RequiresApi</code> instead of <code>@TargetApi</code>.</p> </li> </ul>"},{"location":"changelog/#version-200-rc1-25-12-2016","title":"Version 2.0.0-RC1 (25-12-2016)","text":"<p>rx-preferences has been updated to support RxJava 2.0. The <code>Preference</code> type is now an interface, but the core itself is mostly unchanged. <code>2.0.0-RC1</code> does not handle backpressure yet.</p> <p>Because the release includes breaking API changes, we're changing the project's package name from <code>com.f2prateek.rx.preferences</code> to <code>com.f2prateek.rx.preferences2</code>. The maven group has also changed to <code>com.f2prateek.rx.preferences2</code>. This should make it possible for large applications and libraries to migrate incrementally.</p>"},{"location":"changelog/#version-102-15-06-2016","title":"Version 1.0.2 (15-06-2016)","text":"<ul> <li>Remove custom backpressure support in favor of RxJava 1.1's built-in buffer latest.</li> </ul>"},{"location":"changelog/#version-101-28-10-2015","title":"Version 1.0.1 (28-10-2015)","text":"<ul> <li>Add support for backpressure.</li> <li>Use reasonable defaults for creating Preferences that store primitives.</li> </ul>"},{"location":"changelog/#version-100-23-08-2015","title":"Version 1.0.0 (23-08-2015)","text":"<p>Initial release.</p>"},{"location":"core/","title":"Core","text":"<p>The core library provides the <code>RxSharedPreferences</code> class that contains APIs to get typed <code>Preference</code> objects, which represent the preferences stored in the Android <code>SharedPreferences</code>.</p>"},{"location":"core/#getting-the-dependency","title":"Getting the dependency","text":"<pre><code>implementation \"com.frybits.rx.preferences:core:2.0.0\"\n</code></pre>"},{"location":"core/#usage","title":"Usage","text":""},{"location":"core/#creating-rxsharedpreferences","title":"Creating <code>RxSharedPreferences</code>","text":"Kotlin Java <pre><code>val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)\nval rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n</code></pre> <pre><code>SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\nRxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n</code></pre>"},{"location":"core/#basic-usage-of-preferences","title":"Basic usage of preferences","text":"Kotlin Java <pre><code>// Using a string preference\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\") // Default value optional\n\nprintln(usernamePref.value) // null\n\nusernamePref.value = \"bob\"\n\nprintln(usernamePref.value) // \"bob\"\n</code></pre> <pre><code>// Using a string prefrence\nPreference&lt;String&gt; usernamePref = rxSharedPreferences.getString(\"username\"); // Default value optional\n\nSystem.out.println(usernamePref.getValue()); // null\n\nusernamePref.setValue(\"bob\");\n\nSystem.out.println(usernamePref.getValue()); // \"bob\"\n</code></pre>"},{"location":"core/#using-enums","title":"Using Enums","text":"Kotlin Java <pre><code>enum class Cats {\n    TABBY,\n    BLACK,\n    ORANGE\n}\nval catsPref: Preference&lt;Cats&gt; = rxSharedPreferences.getEnum(\"cats\", Cats.TABBY)\n\nprintln(catsPref.value) // \"TABBY\"\n\ncatsPref.value = Cats.ORANGE\n\nprintln(catsPref.value) // \"ORANGE\"\n</code></pre> <pre><code>enum Cats {\n    TABBY,\n    BLACK,\n    ORANGE\n}\nPreference&lt;Cats&gt; catsPref = rxSharedPreferences.getEnum(\"cats\", Cats.TABBY, Cats.class);\n\nSystem.out.println(catsPref.getValue()); // \"TABBY\"\n\ncatsPref.setValue(Cats.ORANGE);\n\nSystem.out.println(catsPref.getValue()); // \"ORANGE\"\n</code></pre>"},{"location":"core/#using-custom-types","title":"Using custom types","text":"Kotlin Java <pre><code>@Serializable\ndata class Foobar(val someString: String = \"\", val someInt: Int = 0)\n\n// Create the converter\nval converter = object : Converter&lt;Foobar?&gt; {\n    override fun deserialize(serialized: String?): Foobar? {\n        return serialized?.let { Json.decodeFromString&lt;Foobar&gt;(it) }\n    }\n\n    override fun serialize(value: Foobar?): String? {\n        return value?.let { Json.encodeToString(it) }\n    }\n}\n\nval foobarPref: Preference&lt;Foobar?&gt; = rxSharedPreferences.getObject(\"foobar\", null, converter)\n\nprintln(foobarPref.value) // null\n\nfoobarPref.value = Foobar(\"str\", 42)\n\nprintln(foobarPref.value) // \"Foobar(someString=str, someNum=42)\"\n</code></pre> <pre><code>public static class Foobar {\n    final String someString;\n    final int someInt;\n\n    public Foobar() {\n        someString = \"\";\n        someInt = 0;\n    }\n\n    public Foobar(String someString, int someInt) {\n        this.someString = someString;\n        this.someInt = someInt;\n    }\n\n    @NonNull\n    @Override\n    public String toString() {\n        return \"Foobar(someString=\" + someString + \", someInt=\" + someInt + \")\";\n    }\n}\n\n// Assuming Gson usage in Java\nGson gson = new Gson();\n\n// Create the converter\nPreference.Converter&lt;Foobar&gt; converter = new Preference.Converter&lt;Foobar&gt;() {\n    @Nullable\n    @Override\n    public Foobar deserialize(@Nullable String serialized) {\n        if (serialized == null) {\n            return new Foobar();\n        }\n        return gson.fromJson(serialized, Foobar.class);\n    }\n\n    @Nullable\n    @Override\n    public String serialize(@Nullable Foobar value) {\n        if (value == null) {\n            return null;\n        }\n        return gson.toJson(value);\n    }\n};\nPreference&lt;Foobar&gt; foobarPref = rxSharedPreferences.getObject(\"foobar\", null, converter);\n\nSystem.out.println(foobarPref.getValue()); // null\n\nfoobarPref.setValue(new Foobar(\"str\", 42));\n\nSystem.out.println(foobarPref.getValue()); // \"Foobar(someString=str, someInt=42)\"\n</code></pre>"},{"location":"core/#clearing-the-preferences","title":"Clearing the preferences","text":"Kotlin Java <pre><code>// Using a string preference\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\", \"bob\") // Default value optional\n\nprintln(usernamePref.isSet) // false\nprintln(usernamePref.defaultValue) // \"bob\"\nprintln(usernamePref.value) // \"bob\"\n\nusernamePref.value = \"domokun\"\n\nprintln(usernamePref.isSet) // true\nprintln(usernamePref.defaultValue) // \"bob\"\nprintln(usernamePref.value) // \"domokun\"\n\n// Clears this preference\nusernamePref.delete()\n// or to clear everything\n// rxSharedPreferences.clear() \n\nprintln(usernamePref.isSet) // false\nprintln(usernamePref.defaultValue) // \"bob\"\nprintln(usernamePref.value) // \"bob\"\n</code></pre> <pre><code>// Using a string prefrence\nPreference&lt;String&gt; usernamePref = rxSharedPreferences.getString(\"username\", \"bob\"); // Default value optional\n\nSystem.out.println(usernamePref.isSet()); // false\nSystem.out.println(usernamePref.getDefaultValue()); // \"bob\"\nSystem.out.println(usernamePref.getValue()); // \"bob\"\n\nusernamePref.setValue(\"domokun\");\n\nSystem.out.println(usernamePref.isSet()); // true\nSystem.out.println(usernamePref.getDefaultValue()); // \"bob\"\nSystem.out.println(usernamePref.getValue()); // \"domokun\"\n\n// Clears this preference\nusernamePref.delete();\n// or to clear everything\n// rxSharedPreferences.clear();\n\nSystem.out.println(usernamePref.isSet()); // false\nSystem.out.println(usernamePref.getDefaultValue()); // \"bob\"\nSystem.out.println(usernamePref.getValue()); // \"bob\"\n</code></pre>"},{"location":"coroutines/","title":"Coroutines","text":"<p>The coroutines library adds extension functions to convert the <code>Prefrence</code> into <code>Flow</code> and <code>Collector</code> objects. It also provides a few extra APIs to perform <code>commit()</code> operations with suspend functions.</p> <p>Note: This library is not accessible from Java sources.</p>"},{"location":"coroutines/#getting-the-dependency","title":"Getting the dependency","text":"<pre><code>implementation \"com.frybits.rx.preferences:coroutines:2.0.0\"\n</code></pre>"},{"location":"coroutines/#usage","title":"Usage","text":""},{"location":"coroutines/#preference-as-a-flow","title":"Preference as a Flow","text":"<pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval scope = CoroutineScope(Dispatchers.Main.immediate)\n\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\")\n\nval usernameFlow: Flow&lt;String?&gt; = usernamePref.asFlow()\n\nusernameFlow.onEach { name -&gt;\n    println(name) // Immediately emits 'null'\n}.launchIn(scope)\n\nusernamePref.value = \"bob\"\n// Output from flow =&gt; \"bob\"\n</code></pre>"},{"location":"coroutines/#preference-as-a-collector","title":"Preference as a Collector","text":"<pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval scope = CoroutineScope(Dispatchers.Main.immediate)\n\nval featureEnabledPref: Preference&lt;Boolean&gt; = rxSharedPreferences.getBoolean(\"somePref\")\n\nval featureEnabledCollector = featureEnabledPref.asCollector(committing = true) // Commit every emit\n\nval checkedButtonFlow = channelFlow { \n    val onChangedListener = OnCheckedChangeListener { _, isChecked -&gt;\n        trySendBlocking(isChecked)\n    }\n    button.setOnCheckedChangeListener(onChangedListener)\n    awaitClose { button.setOnCheckedChangeListener(null) }\n}\n\nscope.launch {\n    // Every emit from the flow will be stored to the preference\n    checkedButtonFlow.collect(featureEnabledCollector)\n}\n</code></pre>"},{"location":"livedata/","title":"LiveData","text":"<p>The livedata library adds extension functions to convert the <code>Prefrence</code> into <code>LiveData</code> and <code>Observer</code> objects.</p>"},{"location":"livedata/#getting-the-dependency","title":"Getting the Dependency","text":"<pre><code>implementation \"com.frybits.rx.preferences:livedata:2.0.0\"\n</code></pre>"},{"location":"livedata/#usage","title":"Usage","text":""},{"location":"livedata/#preference-as-livedata","title":"Preference as LiveData","text":"Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\")\n\nval usernameLiveData: LiveData&lt;String?&gt; = usernamePref.asLiveData()\n\nusernameLiveData.observeForever { name -&gt;\n    println(name) // Immediately emits 'null'\n}\n\nusernamePref.value = \"bob\"\n// Output from livedata =&gt; \"bob\"\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;String&gt; usernamePref = rxSharedPreferences.getString(\"username\");\n\nLiveData&lt;String&gt; usernameLiveData = LiveDataPreference.asLiveData(usernamePref);\n\nusernameLiveData.observeForever(s -&gt; {\n    System.out.println(s); // Immediately emits 'null'\n});\n\nusernamePref.setValue(\"bob\");\n// Output from livedata =&gt; \"bob\"\n</code></pre>"},{"location":"livedata/#preferene-as-an-observer","title":"Preferene as an Observer","text":"Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval featureEnabledPref: Preference&lt;Boolean&gt; = rxSharedPreferences.getBoolean(\"somePref\")\n\nval featureEnabledObserver = featureEnabledPref.asObserver()\n\nval checkButtonLiveData = object : LiveData&lt;Boolean&gt;() {\n\n    val onChangedListener = OnCheckedChangeListener { _, isChecked -&gt;\n        value = isChecked\n    }\n\n    override fun onActive() {\n        button.setOnCheckedChangeListener(onChangedListener)\n    }\n\n    override fun onInactive() {\n        button.setOnCheckedChangeListener(null)\n    }\n}\n\ncheckButtonLiveData.observeForever(featureEnabledObserver)\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;Boolean&gt; featureEnabledPref = rxSharedPreferences.getBoolean(\"somePref\");\n\nObserver&lt;Boolean&gt; featureEnabledObserver = LiveDataPreference.asObserver(featureEnabledPref);\n\nLiveData&lt;Boolean&gt; checkButtonLiveData = new LiveData&lt;&gt;() {\n\n    private OnCheckedChangeListener onChangedListener = new OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            setValue(isChecked);\n        }\n    };\n\n    @Override\n    public void onActive() {\n        button.setOnCheckedChangeListener(onChangedListener);\n    }\n\n    @Override\n    public void onInactive() {\n        button.setOnCheckedChangeListener(null);\n    }\n};\n\ncheckButtonLiveData.observeForever(featureEnabledObserver);\n</code></pre>"},{"location":"migration/","title":"Migrating from f2prateek/rx-preferences","text":"<p>Many of the APIs are similar to f2prateek/rx-preferences, however there were some changes to packages. This guide can be used for migrating from <code>f2prateek/rx-preferences</code> to <code>pablobaxter/rx-preferences</code> library.</p>"},{"location":"migration/#project-buildgradle","title":"Project <code>build.gradle</code>","text":"<pre><code>// build.gradle\n- implementation 'com.f2prateek.rx.preferences2:rx-preferences'\n+ implementation 'com.frybits.rx.preferences:core'\n+ implementation 'com.frybits.rx.preferences:rx2'\n</code></pre>"},{"location":"migration/#import-package-changes","title":"Import package changes","text":"Kotlin Java <pre><code>// Rename for Preference class\n- import com.f2prateek.rx.preferences2.Preference\n+ com.frybits.rx.preferences.core.Preference\n\n// Rename for RxSharedPreferences\n- import com.f2prateek.rx.preferences2.RxSharedPreferences\n+ import com.frybits.rx.preferences.core.RxSharedPreferences\n\n// Additional import for RxJava 2\n+ import com.frybits.rx.preferences.rx2.asObservable\n</code></pre> <pre><code>// Rename for Preference class\n- import com.f2prateek.rx.preferences2.Preference;\n+ com.frybits.rx.preferences.core.Preference;\n\n// Rename for RxSharedPreferences\n- import com.f2prateek.rx.preferences2.RxSharedPreferences;\n+ import com.frybits.rx.preferences.core.RxSharedPreferences;\n\n// Additional import for RxJava 2\n+ import com.frybits.rx.preferences.rx2.Rx2Preference;\n\n// In code changes\n- preference.asObservable()\n+ Rx2Preference.asObservable(preference)\n</code></pre>"},{"location":"rx2/","title":"Rx2","text":"<p>The livedata library adds extension functions to convert the <code>Prefrence</code> into <code>Observable</code> and <code>Consumer</code> objects.</p>"},{"location":"rx2/#getting-the-dependency","title":"Getting the Dependency","text":"<pre><code>implementation \"com.frybits.rx.preferences:rx2:2.0.0\"\n</code></pre>"},{"location":"rx2/#usage","title":"Usage","text":""},{"location":"rx2/#using-non-nullable-preference-with-rx2","title":"Using non-nullable Preference with Rx2","text":"<p>Due to RxJava not allowing for <code>null</code> to be emitted, the <code>asOptional()</code> operator was created for <code>Preference</code> to convert any <code>Preference&lt;T&gt;</code> object into a <code>Preference&lt;Optional&lt;T&gt;&gt;</code> object. Note: This is the <code>com.google.common.base.Optional</code> class, and not the Java8 <code>Optional</code> class.</p>  Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\")\nval optionalUsernamePref: Preference&lt;Optional&lt;String?&gt;&gt; = usernamePref.asOptional()\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;String&gt; usernamePref = rxSharedPreferences.getString(\"username\");\nPreference&lt;Optional&lt;String&gt;&gt; optionalUsernamePref = PreferenceUtil.asOptional(usernamePref);\n</code></pre>"},{"location":"rx2/#preference-as-an-observable","title":"Preference as an Observable","text":"Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\", null)\n\n// RxJava doesn't allow for 'null' values to be emitted. Make it optional instead.\nval optionalUsernamePref: Preference&lt;Optional&lt;String?&gt;&gt; = usernamePref.asOptional()\n\nval usernameObservable: Observable&lt;Optional&lt;String?&gt;&gt; = optionalUsernamePref.asObservable()\n\nusernameObservable.subscribe { name -&gt;\n    println(name.orNull()) // Immediately emits an empty Optional\n}\n\nusernamePref.value = \"bob\"\n// Output from RxJava =&gt; \"bob\"\n\n// You could also set the value via the optional prefrence as such\noptionalUsernamePref.value = Optional.fromNullable(\"foobar\")\n// Output from RxJava =&gt; \"foobar\"\n\n// Or set it to null\nusernamePref.value = null\n// Output from RxJava =&gt; Empty optional\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;String&gt; usernamePref = rxSharedPreferences.getString(\"username\", null);\n\n// RxJava doesn't allow for 'null' values to be emitted. Make it optional instead.\nPreference&lt;Optional&lt;String&gt;&gt; optionalUsernamePref = PreferenceUtil.asOptional(usernamePref);\n\nObservable&lt;Optional&lt;String&gt;&gt; usernameObservable = Rx2Preference.asObservable(optionalUsernamePref);\n\nusernameObservable.subscribe(name -&gt; {\n    System.out.println(name.orNull()); // Immediately emits an empty Optional\n});\n\nusernamePref.setValue(\"bob\");\n// Output from RxJava =&gt; \"bob\"\n\n// You could also set the value via the optional prefrence as such\noptionalUsernamePref.setValue(Optional.fromNullable(\"foobar\"));\n// Output from RxJava =&gt; \"foobar\"\n\n// Or set it to null\nusernamePref.setValue(null);\n// Output from RxJava =&gt; Empty optional\n</code></pre>"},{"location":"rx2/#preference-as-a-consumer","title":"Preference as a Consumer","text":"Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval featureEnabledPref: Preference&lt;Boolean&gt; = rxSharedPreferences.getBoolean(\"somePref\")\n\nval featureEnabledConsumer = featureEnabledPref.asConsumer()\n\nval checkButtonObservable = Observable.create { emitter -&gt;\n\n    val onChangedListener = OnCheckedChangeListener { _, isChecked -&gt;\n        emitter.onNext(isChecked)\n    }\n\n    emitter.setCancellable {\n        button.setOnCheckedChangeListener(null)\n    }\n\n    button.setOnCheckedChangeListener(onChangedListener)\n}\n\ncheckButtonObservable.subscribe(featureEnabledConsumer)\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;Boolean&gt; featureEnabledPref = rxSharedPreferences.getBoolean(\"somePref\");\n\nConsumer&lt;Boolean&gt; featureEnabledConsumer = Rx2Preference.asConsumer(featureEnabledPref);\n\nObservable&lt;Boolean&gt; checkButtonObservable = Observable.create(emitter -&gt; {\n\n    OnCheckedChangeListener onChangedListener = new OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            emitter.onNext(isChecked);\n        }\n    };\n\n    emitter.setCancellable(() -&gt; {\n        button.setOnCheckedChangeListener(null);\n    });\n\n    button.setOnCheckedChangeListener(onChangedListener);\n});\n\ncheckButtonObservable.subscribe(featureEnabledConsumer);\n</code></pre>"},{"location":"rx3/","title":"Rx3","text":"<p>The livedata library adds extension functions to convert the <code>Prefrence</code> into <code>Observable</code> and <code>Consumer</code> objects.</p>"},{"location":"rx3/#getting-the-dependency","title":"Getting the Dependency","text":"<pre><code>implementation \"com.frybits.rx.preferences:rx3:2.0.0\"\n</code></pre>"},{"location":"rx3/#usage","title":"Usage","text":""},{"location":"rx3/#using-non-nullable-preference-with-rx3","title":"Using non-nullable Preference with Rx3","text":"<p>Due to RxJava not allowing for <code>null</code> to be emitted, the <code>asOptional()</code> operator was created for <code>Preference</code> to convert any <code>Preference&lt;T&gt;</code> object into a <code>Preference&lt;Optional&lt;T&gt;&gt;</code> object. Note: This is the <code>com.google.common.base.Optional</code> class, and not the Java8 <code>Optional</code> class.</p>  Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\")\nval optionalUsernamePref: Preference&lt;Optional&lt;String?&gt;&gt; = usernamePref.asOptional()\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;String&gt; usernamePref = rxSharedPreferences.getString(\"username\");\nPreference&lt;Optional&lt;String&gt;&gt; optionalUsernamePref = PreferenceUtil.asOptional(usernamePref);\n</code></pre>"},{"location":"rx3/#preference-as-an-observable","title":"Preference as an Observable","text":"Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval usernamePref: Preference&lt;String?&gt; = rxSharedPreferences.getString(\"username\", null)\n\n// RxJava doesn't allow for 'null' values to be emitted. Make it optional instead.\nval optionalUsernamePref: Preference&lt;Optional&lt;String?&gt;&gt; = usernamePref.asOptional()\n\nval usernameObservable: Observable&lt;Optional&lt;String?&gt;&gt; = optionalUsernamePref.asObservable()\n\nusernameObservable.subscribe { name -&gt;\n    println(name.orNull()) // Immediately emits an empty Optional\n}\n\nusernamePref.value = \"bob\"\n// Output from RxJava =&gt; \"bob\"\n\n// You could also set the value via the optional prefrence as such\noptionalUsernamePref.value = Optional.fromNullable(\"foobar\")\n// Output from RxJava =&gt; \"foobar\"\n\n// Or set it to null\nusernamePref.value = null\n// Output from RxJava =&gt; Empty optional\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;String&gt; usernamePref = rxSharedPreferences.getString(\"username\", null);\n\n// RxJava doesn't allow for 'null' values to be emitted. Make it optional instead.\nPreference&lt;Optional&lt;String&gt;&gt; optionalUsernamePref = PreferenceUtil.asOptional(usernamePref);\n\nObservable&lt;Optional&lt;String&gt;&gt; usernameObservable = Rx3Preference.asObservable(optionalUsernamePref);\n\nusernameObservable.subscribe(name -&gt; {\n    System.out.println(name.orNull()); // Immediately emits an empty Optional\n});\n\nusernamePref.setValue(\"bob\");\n// Output from RxJava =&gt; \"bob\"\n\n// You could also set the value via the optional prefrence as such\noptionalUsernamePref.setValue(Optional.fromNullable(\"foobar\"));\n// Output from RxJava =&gt; \"foobar\"\n\n// Or set it to null\nusernamePref.setValue(null);\n// Output from RxJava =&gt; Empty optional\n</code></pre>"},{"location":"rx3/#preference-as-a-consumer","title":"Preference as a Consumer","text":"Kotlin Java <pre><code>val rxSharedPreferences = sharedPreferences.asRxSharedPreferences()\n\nval featureEnabledPref: Preference&lt;Boolean&gt; = rxSharedPreferences.getBoolean(\"somePref\")\n\nval featureEnabledConsumer = featureEnabledPref.asConsumer()\n\nval checkButtonObservable = Observable.create { emitter -&gt;\n\n    val onChangedListener = OnCheckedChangeListener { _, isChecked -&gt;\n        emitter.onNext(isChecked)\n    }\n\n    emitter.setCancellable {\n        button.setOnCheckedChangeListener(null)\n    }\n\n    button.setOnCheckedChangeListener(onChangedListener)\n}\n\ncheckButtonObservable.subscribe(featureEnabledConsumer)\n</code></pre> <pre><code>RxSharedPreferences rxSharedPreferences = RxSharedPreferences.create(sharedPreferences);\n\nPreference&lt;Boolean&gt; featureEnabledPref = rxSharedPreferences.getBoolean(\"somePref\");\n\nConsumer&lt;Boolean&gt; featureEnabledConsumer = Rx3Preference.asConsumer(featureEnabledPref);\n\nObservable&lt;Boolean&gt; checkButtonObservable = Observable.create(emitter -&gt; {\n\n    OnCheckedChangeListener onChangedListener = new OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            emitter.onNext(isChecked);\n        }\n    };\n\n    emitter.setCancellable(() -&gt; {\n        button.setOnCheckedChangeListener(null);\n    });\n\n    button.setOnCheckedChangeListener(onChangedListener);\n});\n\ncheckButtonObservable.subscribe(featureEnabledConsumer);\n</code></pre>"}]}